# generated by datamodel-codegen:
#   filename:  treatment.json
#   timestamp: 2024-03-15T18:19:19+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    constr,
)


class Tag(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50) = Field(
        ..., description='A tag for the item.', title='Tag'
    )


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class ConcentrationUnits(Enum):
    mg_mL = 'mg/mL'


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class Treatment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    tags: Optional[List[Tag]] = Field(
        None,
        description='Key words that can tag an item - useful for filtering.',
        title='Tags',
    )
    submitted_id: constr(pattern=r'^[A-Z0-9]{3,}_TREATMENT_[A-Z0-9-_.]{4,}$') = Field(
        ..., description='Identifier on submission', title='Submitter ID'
    )
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '1', title='Schema Version'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    submission_centers: List[str] = Field(
        ...,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    accession: Optional[str] = Field(
        None,
        description='A unique identifier to be used to reference the object.',
        title='Accession',
    )
    alternate_accessions: Optional[List[str]] = Field(
        None,
        description='Accessions previously assigned to objects that have been merged with this object.',
        title='Alternate Accessions',
    )
    agent: str = Field(..., description='Agent in the treatment', title='Agent')
    concentration: Optional[confloat(ge=0.0)] = Field(
        None, description='Concentration of the treatment', title='Concentration'
    )
    concentration_units: Optional[ConcentrationUnits] = Field(
        None,
        description='Units for the concentration of the treatment',
        title='Concentration Units',
    )
    duration: Optional[confloat(ge=0.0)] = Field(
        None, description='Duration of the treatment (minutes)', title='Duration'
    )
    temperature: Optional[float] = Field(
        None, description='Temperature of the treatment (Celsius)', title='Temperature'
    )
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
