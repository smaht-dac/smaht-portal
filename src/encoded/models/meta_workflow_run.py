# generated by datamodel-codegen:
#   filename:  meta_workflow_run.json
#   timestamp: 2024-03-15T18:19:17+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel, constr


class Tag(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50) = Field(
        ..., description='A tag for the item.', title='Tag'
    )


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class Alias(RootModel[constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$')]):
    root: constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$') = Field(
        ...,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='ID Alias',
    )


class FinalStatus(Enum):
    pending = 'pending'
    running = 'running'
    completed = 'completed'
    failed = 'failed'
    inactive = 'inactive'
    stopped = 'stopped'
    quality_metric_failed = 'quality metric failed'


class Status1(Enum):
    pending = 'pending'
    running = 'running'
    completed = 'completed'
    failed = 'failed'


class OutputItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(
        ..., description='Name of the output argument', title='Argument Name'
    )
    file: str = Field(
        ..., description='the actual output file (link to a file item)', title='File'
    )


class WorkflowRun(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the corresponding workflow defined in the meta-workflow',
        title='Name',
    )
    status: Optional[Status1] = Field(
        None, description='Status of the current workflow run', title='Status'
    )
    shard: Optional[str] = Field(
        None,
        description='Shard of the current workflow run in the format of x (1D) | x:x (2D) | x:x:x (3D)',
        title='Shard',
    )
    dependencies: Optional[List[str]] = Field(
        None,
        description='Dependencies of the current workflow run',
        min_length=1,
        title='Dependencies',
    )
    output: Optional[List[OutputItem]] = Field(
        None,
        description='Output of the current workflow run',
        min_length=1,
        title='Output',
    )
    workflow_run: Optional[str] = Field(
        None,
        description='Link to the corresponding workflow run item',
        title='Workflow Run',
    )
    job_id: Optional[str] = Field(
        None, description='Job ID of the current workflow run', title='Job ID'
    )


class ArgumentType(Enum):
    file = 'file'
    parameter = 'parameter'
    QC_ruleset = 'QC ruleset'


class File(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: str = Field(..., title='File')
    dimension: Optional[str] = Field(
        None,
        description="Dimension of file in the input argument (unset for a singleton, '0', '1', '2'.. for a list, '0,0', '0,1' ... for a nested list)",
        title='Dimension',
    )


class Input(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Union[str, int, float, bool, List[Any], Dict[str, Any]] = Field(
        ..., description='a specific input parameter value', title='Value'
    )
    files: Optional[List[File]] = Field(
        None,
        description='Default file item(s) of the file argument',
        min_length=1,
        title='Default files',
    )


class Input1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Optional[Union[str, int, float, bool, List[Any], Dict[str, Any]]] = Field(
        None, description='a specific input parameter value', title='Value'
    )
    files: List[File] = Field(
        ...,
        description='Default file item(s) of the file argument',
        min_length=1,
        title='Default files',
    )


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class MetaWorkflowRun(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    title: Optional[constr(min_length=3)] = Field(
        None, description='Title for the item', title='Title'
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='Key words that can tag an item - useful for filtering.',
        title='Tags',
    )
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '1', title='Schema Version'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    description: Optional[str] = Field(
        None, description='Plain text description of the item', title='Description'
    )
    submission_centers: Optional[List[str]] = Field(
        None,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    aliases: Optional[List[Alias]] = Field(
        None,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='Aliases',
    )
    accession: Optional[str] = Field(
        None,
        description='A unique identifier to be used to reference the object.',
        title='Accession',
    )
    alternate_accessions: Optional[List[str]] = Field(
        None,
        description='Accessions previously assigned to objects that have been merged with this object.',
        title='Alternate Accessions',
    )
    meta_workflow: str = Field(
        ...,
        description='The meta workflow associated with the meta-workflow run.',
        title='Meta Workflow',
    )
    final_status: Optional[FinalStatus] = Field('pending', title='Final Status')
    failed_jobs: Optional[List[str]] = Field(
        None,
        description='List of failed Tibanna job ids for this meta workflow run',
        title='Failed Jobs',
    )
    cost: Optional[float] = Field(
        None,
        description='Total cost of the meta workflow run (includes failed jobs)',
        title='Cost',
    )
    file_sets: Optional[List[str]] = Field(
        None,
        description='File collections associated with this MetaWorkflowRun',
        min_length=1,
        title='File Sets',
    )
    workflow_runs: Optional[List[WorkflowRun]] = Field(
        None,
        description='The list of workflow runs with their status and output files',
        title='Workflow Runs',
    )
    input: Optional[List[Union[Input, Input1]]] = Field(
        None,
        description='The input files and parameters used for the meta workflow run.',
        min_length=1,
        title='Input',
    )
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
