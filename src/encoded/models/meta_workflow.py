# generated by datamodel-codegen:
#   filename:  meta_workflow.json
#   timestamp: 2024-03-15T18:19:17+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    conint,
    constr,
)


class Tag(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50) = Field(
        ..., description='A tag for the item.', title='Tag'
    )


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class Alias(RootModel[constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$')]):
    root: constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$') = Field(
        ...,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='ID Alias',
    )


class CategoryEnum(Enum):
    Alignment = 'Alignment'
    Format_Conversion = 'Format Conversion'
    Read_Manipulation = 'Read Manipulation'
    Quality_Control = 'Quality Control'
    Variant_Calling = 'Variant Calling'
    Variant_Manipulation = 'Variant Manipulation'


class BehaviorOnCapacityLimit(Enum):
    wait_and_retry = 'wait_and_retry'


class InstanceTypeItem(
    RootModel[constr(pattern=r'^[a-z][a-z0-9-]+[.][0-9]*[a-z-*]+$')]
):
    root: constr(pattern=r'^[a-z][a-z0-9-]+[.][0-9]*[a-z-*]+$')


class Config(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    behavior_on_capacity_limit: Optional[BehaviorOnCapacityLimit] = Field(
        'wait_and_retry', title='Behavior on Capacity Limit'
    )
    cpu: Optional[int] = Field(None, title='CPU')
    ebs_iops: Optional[conint(ge=0)] = Field(
        None, description='EBS input/output operations per second', title='EBS IOPS'
    )
    ebs_throughput: Optional[conint(ge=0)] = Field(
        None, description='EBS throughput, in MiB/s', title='EBS Throughput'
    )
    ebs_optimized: Optional[bool] = Field(None, title='EBS Optimized')
    ebs_size: Optional[
        Union[constr(pattern=r'^([0-9]+[.])?[0-9]+[x]$'), conint(ge=0)]
    ] = Field(None, title='EBS Size')
    instance_type: List[InstanceTypeItem] = Field(
        ..., min_length=1, title='Instance Type'
    )
    memory: Optional[float] = Field(None, title='Memory')
    run_name: str = Field(..., title='Run Name')
    spot_instance: Optional[bool] = Field(None, title='Spot Instance')


class AlignmentDetail(Enum):
    Phased = 'Phased'
    Sorted = 'Sorted'


class DataCategoryEnum(Enum):
    Genome_Region = 'Genome Region'
    Quality_Control = 'Quality Control'
    Reference_Genome = 'Reference Genome'
    Sequencing_Reads = 'Sequencing Reads'
    Germline_Variant_Calls = 'Germline Variant Calls'
    Somatic_Variant_Calls = 'Somatic Variant Calls'


class DataTypeEnum(Enum):
    Aligned_Reads = 'Aligned Reads'
    Image = 'Image'
    Index = 'Index'
    Reference_Sequence = 'Reference Sequence'
    Sequence_Interval = 'Sequence Interval'
    Statistics = 'Statistics'
    Unaligned_Reads = 'Unaligned Reads'
    CNV = 'CNV'
    Indel = 'Indel'
    MEI = 'MEI'
    SNV = 'SNV'
    SV = 'SV'


class OutputStatus(Enum):
    Final_Output = 'Final Output'


class S3LifecycleCategory(Enum):
    ignore = 'ignore'
    long_term_access = 'long_term_access'
    long_term_access_long_term_archive = 'long_term_access_long_term_archive'
    long_term_archive = 'long_term_archive'
    no_storage = 'no_storage'
    short_term_access = 'short_term_access'
    short_term_access_long_term_archive = 'short_term_access_long_term_archive'
    short_term_archive = 'short_term_archive'


class CustomPfFields(BaseModel):
    alignment_details: Optional[List[AlignmentDetail]] = Field(
        None,
        description='Additional details about sequencing alignment',
        min_length=1,
        title='Data Details',
    )
    data_category: Optional[List[DataCategoryEnum]] = Field(
        None,
        description='Category for information in the file',
        min_length=1,
        title='Data Category',
    )
    data_type: Optional[List[DataTypeEnum]] = Field(
        None, min_length=1, title='Data Type'
    )
    description: Optional[str] = Field(
        None, description='Plain text description of the item', title='Description'
    )
    output_status: Optional[OutputStatus] = Field(
        None,
        description='Output status of this file within the MetaWorkflowRun',
        title='Output status',
    )
    reference_genome: Optional[str] = Field(
        None,
        description='Reference genome used for alignment',
        title='Reference Genome',
    )
    s3_lifecycle_category: Optional[S3LifecycleCategory] = Field(
        None,
        description='The lifecycle category determines how long a file remains in a certain storage class.  If set to ignore, lifecycle management will have no effect on this file',
        title='S3 Lifecycle Category',
    )
    software: Optional[List[str]] = Field(
        None,
        description='Software used to create this file',
        min_length=1,
        title='Software',
    )


class ArgumentType(Enum):
    file = 'file'
    parameter = 'parameter'
    QC_ruleset = 'QC ruleset'


class ValueType(Enum):
    string = 'string'
    integer = 'integer'
    float = 'float'
    boolean = 'boolean'
    array = 'array'
    object = 'object'


class Unzip(Enum):
    gz = 'gz'
    bz2 = 'bz2'


class InputItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Optional[Union[str, int, float, bool, List[Any], Dict[str, Any]]] = Field(
        None, description='a specific input parameter value', title='Value'
    )
    value_type: Optional[ValueType] = Field(
        None,
        description='Expected type of the specific input parameter value',
        title='Expected Value Type',
    )
    source: Optional[str] = Field(
        None,
        description="Where this input file came from (source workflow name). If this field is null or undefined, the input is global and not from another workflow's output.",
        title='Source Workflow',
    )
    source_argument_name: Optional[str] = Field(
        None,
        description='Output argument name in the source workflow',
        title='Argument name in the Source Workflow',
    )
    scatter: Optional[int] = Field(
        None,
        description='The input dimension decrease if scattered into mutiple runs (default: not set)',
        title='Scatter',
    )
    gather: Optional[int] = Field(
        None,
        description='The input dimension increase from multiple runs of the source workflow (default: not set)',
        title='Gather',
    )
    gather_input: Optional[conint(ge=0)] = Field(None, title='Gather Input')
    input_dimension: Optional[conint(ge=0)] = Field(
        None,
        description='Extra input dimension other than that defined by scatter',
        title='Input Dimension',
    )
    extra_dimension: Optional[int] = Field(
        None,
        description='The extra input dimension increase other than that defined by gather (default: not set)',
        title='Extra Dimension',
    )
    mount: Optional[bool] = Field(
        None, description='Whether the input is mounted', title='Mount'
    )
    rename: Optional[str] = Field(
        None,
        description='What the input should be renamed to when downloaded to EC2 for execution',
        title='Rename',
    )
    unzip: Optional[Unzip] = Field(
        None,
        description='How the input should be decompressed when downloaded to EC2 for execution',
        title='Unzip',
    )


class Shard(RootModel[List[Any]]):
    root: List[Any]


class Workflow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Config = Field(
        ..., description='Tibanna configuration for execution', title='Tibanna Config'
    )
    custom_pf_fields: Optional[Dict[str, CustomPfFields]] = Field(
        None,
        description='Custom fields to be added to specified processed file items through Tibanna',
        title='Custom PF fields',
    )
    dependencies: Optional[List[str]] = Field(
        None,
        description='forced dependencies (other than deduced from input-output connections)',
        min_length=1,
        title='Dependencies',
    )
    input: List[InputItem] = Field(..., min_length=1, title='Workflow Inputs')
    name: str = Field(
        ...,
        description='Name of the workflow, unique within the meta workflow',
        title='Name',
    )
    shards: Optional[List[Shard]] = Field(None, min_length=1, title='Shards')
    workflow: str = Field(..., description='Link to Workflow', title='Workflow')


class File(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: str = Field(..., title='File')
    dimension: Optional[str] = Field(
        None,
        description="Dimension of file in the input argument (unset for a singleton, '0', '1', '2'.. for a list, '0,0', '0,1' ... for a nested list)",
        title='Dimension',
    )


class Dimensionality(Enum):
    integer_1 = 1
    integer_2 = 2


class Input(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Union[str, int, float, bool, List[Any], Dict[str, Any]] = Field(
        ..., description='a specific input parameter value', title='Value'
    )
    value_type: Optional[ValueType] = Field(
        None,
        description='Expected type of the specific input parameter value',
        title='Expected Value Type',
    )
    files: Optional[List[File]] = Field(
        None,
        description='Default file item(s) of the file argument',
        min_length=1,
        title='Default files',
    )
    dimensionality: Optional[Dimensionality] = Field(
        None,
        description='The number of dimensions of input files',
        title='Dimensionality',
    )


class Input1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Optional[Union[str, int, float, bool, List[Any], Dict[str, Any]]] = Field(
        None, description='a specific input parameter value', title='Value'
    )
    value_type: ValueType = Field(
        ...,
        description='Expected type of the specific input parameter value',
        title='Expected Value Type',
    )
    files: Optional[List[File]] = Field(
        None,
        description='Default file item(s) of the file argument',
        min_length=1,
        title='Default files',
    )
    dimensionality: Optional[Dimensionality] = Field(
        None,
        description='The number of dimensions of input files',
        title='Dimensionality',
    )


class Input2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Optional[Union[str, int, float, bool, List[Any], Dict[str, Any]]] = Field(
        None, description='a specific input parameter value', title='Value'
    )
    value_type: Optional[ValueType] = Field(
        None,
        description='Expected type of the specific input parameter value',
        title='Expected Value Type',
    )
    files: List[File] = Field(
        ...,
        description='Default file item(s) of the file argument',
        min_length=1,
        title='Default files',
    )
    dimensionality: Optional[Dimensionality] = Field(
        None,
        description='The number of dimensions of input files',
        title='Dimensionality',
    )


class Input3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_name: str = Field(..., title='Input Argument Name')
    argument_type: ArgumentType = Field(..., title='Input Argument Type')
    value: Optional[Union[str, int, float, bool, List[Any], Dict[str, Any]]] = Field(
        None, description='a specific input parameter value', title='Value'
    )
    value_type: Optional[ValueType] = Field(
        None,
        description='Expected type of the specific input parameter value',
        title='Expected Value Type',
    )
    files: Optional[List[File]] = Field(
        None,
        description='Default file item(s) of the file argument',
        min_length=1,
        title='Default files',
    )
    dimensionality: Dimensionality = Field(
        ...,
        description='The number of dimensions of input files',
        title='Dimensionality',
    )


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class MetaWorkflow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    version: constr(pattern=r'^([0-9]+.)*[0-9]+$') = Field(
        ..., description='Version for the item', title='Version'
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    title: constr(min_length=3) = Field(
        ..., description='Title for the item', title='Title'
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='Key words that can tag an item - useful for filtering.',
        title='Tags',
    )
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '2', title='Schema Version'
    )
    name: constr(pattern=r'^[A-Za-z0-9-_]+$', min_length=3) = Field(
        ..., description='Name of the item', title='Name'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    description: Optional[str] = Field(
        None, description='Plain text description of the item', title='Description'
    )
    submission_centers: Optional[List[str]] = Field(
        None,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    aliases: Optional[List[Alias]] = Field(
        None,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='Aliases',
    )
    accession: Optional[str] = Field(
        None,
        description='A unique identifier to be used to reference the object.',
        title='Accession',
    )
    alternate_accessions: Optional[List[str]] = Field(
        None,
        description='Accessions previously assigned to objects that have been merged with this object.',
        title='Alternate Accessions',
    )
    category: List[CategoryEnum] = Field(..., min_length=1)
    previous_versions: Optional[List[str]] = Field(
        None,
        description='Link to the previous versions of the meta workflow.',
        min_length=1,
        title='Previous versions',
    )
    version_upgrade_log: Optional[str] = Field(
        None, description='Version upgrade log', title='Version upgrade log'
    )
    workflows: List[Workflow] = Field(..., min_length=1, title='Workflows')
    input: Optional[List[Union[Input, Input1, Input2, Input3]]] = Field(
        None,
        description='Global input arguments of the meta-workflow',
        min_length=1,
        title='Input Arguments',
    )
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
