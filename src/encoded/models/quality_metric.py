# generated by datamodel-codegen:
#   filename:  quality_metric.json
#   timestamp: 2024-03-15T18:19:18+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, List, Optional, Union
from uuid import UUID

from pydantic import (
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    constr,
)


class Tag(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50) = Field(
        ..., description='A tag for the item.', title='Tag'
    )


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class CategoryEnum(Enum):
    Testing = 'Testing'


class Alias(RootModel[constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$')]):
    root: constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$') = Field(
        ...,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='ID Alias',
    )


class OverallQualityStatus(Enum):
    Fail = 'Fail'
    Pass = 'Pass'
    Warn = 'Warn'


class Flag(Enum):
    Fail = 'Fail'
    Pass = 'Pass'
    Warn = 'Warn'


class QcValue(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., title='QC Name')
    value: Union[List[Any], bool, int, float, str] = Field(..., title='QC value')
    visible: Optional[bool] = Field(None, title='QC to display')
    flag: Optional[Flag] = Field(None, title='QC flag')
    derived_from: Optional[str] = Field(None, title='Identifier for the QC value')
    tooltip: Optional[str] = Field(None, title='Tooltip')


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class QualityMetric(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    tags: Optional[List[Tag]] = Field(
        None,
        description='Key words that can tag an item - useful for filtering.',
        title='Tags',
    )
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '1', title='Schema Version'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    category: Optional[List[CategoryEnum]] = Field(None, min_length=1, title='Category')
    submission_centers: Optional[List[str]] = Field(
        None,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    aliases: Optional[List[Alias]] = Field(
        None,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='Aliases',
    )
    accession: Optional[str] = Field(
        None,
        description='A unique identifier to be used to reference the object.',
        title='Accession',
    )
    alternate_accessions: Optional[List[str]] = Field(
        None,
        description='Accessions previously assigned to objects that have been merged with this object.',
        title='Alternate Accessions',
    )
    overall_quality_status: Optional[OverallQualityStatus] = Field(
        None, description='Overall QC decision', title='Overall Quality'
    )
    url: Optional[AnyUrl] = Field(
        None, description='Location of the main html file', title='Link to Report'
    )
    qc_values: List[QcValue] = Field(
        ..., description='QC values and their associated metadata', title='QC Values'
    )
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
    href: Optional[str] = Field(
        None,
        description='Use this link to download the QualityMetric zip archive.',
        title='Download URL',
    )
