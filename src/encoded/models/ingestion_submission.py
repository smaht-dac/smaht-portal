# generated by datamodel-codegen:
#   filename:  ingestion_submission.json
#   timestamp: 2024-03-15T18:19:17+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel, constr


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class Alias(RootModel[constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$')]):
    root: constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$') = Field(
        ...,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='ID Alias',
    )


class IngestionType(Enum):
    accessioning = 'accessioning'
    data_bundle = 'data_bundle'
    metadata_bundle = 'metadata_bundle'
    simulated_bundle = 'simulated_bundle'


class State(Enum):
    created = 'created'
    submitted = 'submitted'
    processing = 'processing'
    done = 'done'


class Outcome(Enum):
    unknown = 'unknown'
    success = 'success'
    failure = 'failure'
    error = 'error'


class ProcessingStatus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    state: Optional[State] = Field(
        'created',
        description='A state machine description of how processing is progressing (created, submitted, processed, or done).',
        title='State',
    )
    outcome: Optional[Outcome] = Field(
        'unknown',
        description='A token describing the nature of the final outcome, if any. Options are unknown, success, failure, or error.',
        title='Outcome',
    )
    progress: Optional[str] = Field(
        'unavailable',
        description="An adjectival word or phrase assessing progress, such as 'started', 'awaiting prerequisites', '88% done', or 'unavailable'.",
        title='Progress',
    )


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class IngestionSubmission(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '1', title='Schema Version'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    documents: Optional[List[str]] = Field(
        None,
        description='Documents that provide additional information (not data file).',
        title='Documents',
    )
    submission_centers: Optional[List[str]] = Field(
        None,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    aliases: Optional[List[Alias]] = Field(
        None,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='Aliases',
    )
    additional_data: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional structured information resulting from processing, the nature of which may vary by ingestion_type and other factors.',
        title='Additional Data',
    )
    errors: Optional[List[str]] = Field(
        None,
        description='A list of error messages if processing was aborted before results were obtained.',
        min_length=1,
        title='Errors',
    )
    ingestion_type: IngestionType = Field(
        ...,
        description='The type of processing requested for this submission.',
        title='Ingestion Type',
    )
    object_bucket: Optional[str] = Field(
        None,
        description="The name of the S3 bucket in which the 'object_name' resides.",
        title='Object Bucket',
    )
    object_name: Optional[str] = Field(
        None,
        description='The name of the S3 object corresponding to the submitted document.',
        title='Object Name',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='A record of explicitly offered form parameters in the submission request.',
        title='Parameters',
    )
    processing_status: Optional[ProcessingStatus] = Field(
        None,
        description='A structured description of what has happened so far as the submission is processed.',
        title='Processing Status',
    )
    result: Optional[Dict[str, Any]] = Field(
        None,
        description='An object representing a result if processing ran to completion, whether the outcome was success or failure.',
        title='Result',
    )
    submission_id: Optional[str] = Field(
        None,
        description='The name of a folder in the S3 bucket that contains all artifacts related to this submission.',
        title='Submission ID',
    )
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
