# generated by datamodel-codegen:
#   filename:  workflow_run.json
#   timestamp: 2024-03-15T18:19:19+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import (
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    constr,
)


class Tag(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50) = Field(
        ..., description='A tag for the item.', title='Tag'
    )


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class Alias(RootModel[constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$')]):
    root: constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$') = Field(
        ...,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='ID Alias',
    )


class InputFile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    workflow_argument_name: Optional[str] = Field(
        None,
        description='the name of the argument of the workflow that corresponds to the input file',
        title='Workflow argument name',
    )
    value: Optional[str] = Field(
        None, description='a specified input file', title='Input file'
    )
    ordinal: Optional[float] = Field(
        1, description='Ordinal of the file in the argument', title='Ordinal'
    )
    dimension: Optional[str] = Field(
        '0',
        description='Dimension of the file in the argument, in format of e.g. "0" (singlet or 1D array), "1-2" (2D array), or "2-0-1" (3D array)',
        title='Dimension',
    )
    format_if_extra: Optional[str] = Field(
        None,
        description='the file format if the input file is an extra file of a file object',
        title='Format of extra file',
    )
    notes: Optional[str] = Field(None, description='internal notes')


class OutputFile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    workflow_argument_name: Optional[str] = Field(
        None,
        description='Argument name of node in workflow that corresponds to the output file',
        title='Workflow argument name',
    )
    value: Optional[str] = Field(
        None, description='a specified output file', title='Output file'
    )
    value_qc: Optional[str] = Field(
        None, description='a specified output report', title='Output Quality Control'
    )


class Parameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    workflow_argument_name: Optional[str] = Field(
        None,
        description='the name of the argument of the workflow that corresponds to the parameter',
        title='Workflow argument name',
    )
    value: Optional[str] = Field(
        None,
        description='a specified value for the specified parameter as used in a task',
        title='Value',
    )
    software_parameter: Optional[str] = Field(
        None,
        description='the name or flag of the parameter as passed to the software',
        title='Parameter name',
    )
    ordinal: Optional[float] = Field(
        1, description='Ordinal of the parameter in the argument', title='Ordinal'
    )
    dimension: Optional[str] = Field(
        '0',
        description='Dimension of the parameter in the argument, in format of e.g. "0" (singlet or 1D array), "1-2" (2D array), or "2-0-1" (3D array)',
        title='Dimension',
    )


class RunStatus(Enum):
    started = 'started'
    running = 'running'
    output_files_transferring = 'output_files_transferring'
    output_file_transfer_finished = 'output_file_transfer_finished'
    complete = 'complete'
    error = 'error'


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class WorkflowRun(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    tags: Optional[List[Tag]] = Field(
        None,
        description='Key words that can tag an item - useful for filtering.',
        title='Tags',
    )
    title: Optional[constr(min_length=3)] = Field(
        None, description='Title for the item', title='Title'
    )
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '1', title='Schema Version'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    description: Optional[str] = Field(
        None, description='Plain text description of the item', title='Description'
    )
    submission_centers: Optional[List[str]] = Field(
        None,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    aliases: Optional[List[Alias]] = Field(
        None,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='Aliases',
    )
    input_files: Optional[List[InputFile]] = Field(
        None,
        description='The files used as initial input for the workflow.',
        min_length=1,
        title='Input files',
    )
    output_files: Optional[List[OutputFile]] = Field(
        None,
        description='All files that are saved as output of the workflow',
        min_length=1,
        title='Output files',
    )
    parameters: Optional[List[Parameter]] = Field(
        None,
        description='Parameters of the workflow run',
        min_length=1,
        title='parameters',
    )
    postrun_json: Optional[AnyUrl] = Field(
        None,
        description='Location of the AWSEM postrun json file',
        title='Link to Postrun Json',
    )
    run_status: Optional[RunStatus] = Field('started', title='Run Status')
    run_url: Optional[AnyUrl] = Field(None, description='Url to AWS run info')
    workflow: str = Field(
        ..., description='The workflow that was run.', title='Workflow'
    )
    job_id: Optional[str] = Field(None, title='Job ID')
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
