# generated by datamodel-codegen:
#   filename:  workflow.json
#   timestamp: 2024-03-15T18:19:19+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    conint,
    constr,
)


class Tag(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=50) = Field(
        ..., description='A tag for the item.', title='Tag'
    )


class Status(Enum):
    public = 'public'
    draft = 'draft'
    released = 'released'
    in_review = 'in review'
    obsolete = 'obsolete'
    deleted = 'deleted'
    restricted = 'restricted'


class LastModified(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date_modified: Optional[Union[AwareDatetime, date]] = Field(
        None,
        description='Do not submit, value is assigned by the server. The date the object is modified.',
        title='Date Modified',
    )
    modified_by: Optional[str] = Field(
        None,
        description='Do not submit, value is assigned by the server. The user that modfied the object.',
        title='Modified By',
    )


class CategoryEnum(Enum):
    Alignment = 'Alignment'
    Alignment_Manipulation = 'Alignment Manipulation'
    Annotation = 'Annotation'
    Format_Conversion = 'Format Conversion'
    Quality_Control = 'Quality Control'
    Read_Manipulation = 'Read Manipulation'
    Testing = 'Testing'
    Variant_Calling = 'Variant Calling'
    Variant_Manipulation = 'Variant Manipulation'


class Alias(RootModel[constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$')]):
    root: constr(pattern=r'^[^\\s\\\\\\/]+:[^\\s\\\\\\/]+$') = Field(
        ...,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='ID Alias',
    )


class ArgumentType(Enum):
    Input_file = 'Input file'
    Output_processed_file = 'Output processed file'
    Generic_QC_file = 'Generic QC file'
    Output_report_file = 'Output report file'
    Output_to_be_extra_input_file = 'Output to-be-extra-input file'
    parameter = 'parameter'
    QC_ruleset = 'QC ruleset'
    NA = 'NA'


class Argument(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    argument_format: Optional[str] = Field(
        None, description='Argument Format', title='Format'
    )
    argument_to_be_attached_to: Optional[str] = Field(
        None,
        description='Argument to be attached to, for qc files and input extra files',
        title='Argument To Be Attached To',
    )
    argument_type: ArgumentType = Field(..., description='Argument Type', title='Type')
    mount: Optional[bool] = Field(
        None,
        description='Whether the input file should be mounted instead of downlaoded to EC2',
        title='Mount',
    )
    qc_json: Optional[bool] = Field(
        None,
        description='Name of QC file if in .json format, either as it is or in the zipped file',
        title='QC Json',
    )
    qc_zipped: Optional[bool] = Field(
        None, description='Name of QC file if in .zip format', title='QC Zipped'
    )
    secondary_file_formats: Optional[List[str]] = Field(
        None,
        description='formats for secondary files',
        min_length=1,
        title='secondary file formats',
    )
    workflow_argument_name: str = Field(
        ..., description='Name of the argument of the workflow.', title='Name'
    )


class Language(Enum):
    CWL = 'CWL'
    WDL = 'WDL'


class BehaviorOnCapacityLimit(Enum):
    wait_and_retry = 'wait_and_retry'


class InstanceTypeItem(
    RootModel[constr(pattern=r'^[a-z][a-z0-9-]+[.][0-9]*[a-z-*]+$')]
):
    root: constr(pattern=r'^[a-z][a-z0-9-]+[.][0-9]*[a-z-*]+$')


class TibannaConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    behavior_on_capacity_limit: Optional[BehaviorOnCapacityLimit] = Field(
        'wait_and_retry', title='Behavior on Capacity Limit'
    )
    cpu: Optional[int] = Field(None, title='CPU')
    ebs_iops: Optional[conint(ge=0)] = Field(
        None, description='EBS input/output operations per second', title='EBS IOPS'
    )
    ebs_throughput: Optional[conint(ge=0)] = Field(
        None, description='EBS throughput, in MiB/s', title='EBS Throughput'
    )
    ebs_optimized: Optional[bool] = Field(None, title='EBS Optimized')
    ebs_size: Optional[
        Union[constr(pattern=r'^([0-9]+[.])?[0-9]+[x]$'), conint(ge=0)]
    ] = Field(None, title='EBS Size')
    instance_type: List[InstanceTypeItem] = Field(
        ..., min_length=1, title='Instance Type'
    )
    memory: Optional[float] = Field(None, title='Memory')
    run_name: str = Field(..., title='Run Name')
    spot_instance: Optional[bool] = Field(None, title='Spot Instance')


class PrincipalsAllowed(BaseModel):
    view: Optional[str] = None
    edit: Optional[str] = None


class Workflow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    version: Optional[constr(pattern=r'^([0-9]+.)*[0-9]+$')] = Field(
        None, description='Version for the item', title='Version'
    )
    uuid: Optional[UUID] = Field(None, title='UUID')
    tags: Optional[List[Tag]] = Field(
        None,
        description='Key words that can tag an item - useful for filtering.',
        title='Tags',
    )
    title: constr(min_length=3) = Field(
        ..., description='Title for the item', title='Title'
    )
    date_created: Optional[Union[AwareDatetime, date]] = Field(
        None, title='Date Created'
    )
    submitted_by: Optional[str] = Field(None, title='Submitted By')
    status: Optional[Status] = Field('in review', title='Status')
    schema_version: Optional[constr(pattern=r'^\\d+(\\.\\d+)*$')] = Field(
        '1', title='Schema Version'
    )
    name: constr(pattern=r'^[A-Za-z0-9-_]+$', min_length=3) = Field(
        ..., description='Name of the item', title='Name'
    )
    last_modified: Optional[LastModified] = Field(None, title='Last Modified')
    description: Optional[str] = Field(
        None, description='Plain text description of the item', title='Description'
    )
    category: List[CategoryEnum] = Field(..., min_length=1, title='Category')
    submission_centers: Optional[List[str]] = Field(
        None,
        description='Submission Centers that created this item.',
        title='Generated By',
    )
    consortia: Optional[List[str]] = Field(
        None, description='Consortia associated with this item.', title='Consortia'
    )
    aliases: Optional[List[Alias]] = Field(
        None,
        description='Institution-specific ID (e.g. bgm:cohort-1234-a).',
        title='Aliases',
    )
    accession: Optional[str] = Field(
        None,
        description='A unique identifier to be used to reference the object.',
        title='Accession',
    )
    alternate_accessions: Optional[List[str]] = Field(
        None,
        description='Accessions previously assigned to objects that have been merged with this object.',
        title='Alternate Accessions',
    )
    previous_versions: Optional[List[str]] = Field(
        None,
        description='Link to the previous versions of the workflow.',
        title='Previous versions',
    )
    software: Optional[List[str]] = Field(
        None,
        description='List of software items used in the workflow',
        min_length=1,
        title='Software',
    )
    version_upgrade_log: Optional[str] = Field(
        None, description='Version upgrade log', title='Version upgrade log'
    )
    arguments: Optional[List[Argument]] = Field(
        None,
        description='Arguments of the workflow',
        min_length=1,
        title='Workflow Arguments',
    )
    child_file_names: Optional[List[str]] = Field(
        None,
        description='Names of the other files used by the main file for the workflow',
        min_length=1,
        title='Child File Names',
    )
    directory_url: Optional[str] = Field(
        None,
        description='URL of the directory that contains main and associated files',
        title='Directory URL',
    )
    language: Optional[Language] = Field(None, title='Workflow Language')
    main_file_name: Optional[str] = Field(
        None,
        description='Name of the main file for the workflow',
        title='Main File Name',
    )
    tibanna_config: Optional[TibannaConfig] = Field(
        None, description='Tibanna configuration for execution', title='Tibanna Config'
    )
    field_id: Optional[str] = Field(None, alias='@id', title='ID')
    field_type: Optional[List[str]] = Field(None, alias='@type', title='Type')
    principals_allowed: Optional[PrincipalsAllowed] = Field(
        None,
        description='Calculated permissions used for ES filtering',
        title='principals_allowed',
    )
    display_title: Optional[str] = Field(None, title='Display Title')
