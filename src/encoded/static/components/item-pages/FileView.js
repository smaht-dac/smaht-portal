'use strict';

import React, { useEffect } from 'react';
import { console } from '@hms-dbmi-bgm/shared-portal-components/es/components/util';

import DefaultItemView from './DefaultItemView';
import { PageTitleContainer, OnlyTitle } from '../PageTitleSection';
import {
    DotRouter,
    DotRouterTab,
} from '@hms-dbmi-bgm/shared-portal-components/es/components/ui/DotRouter';

import { bytesToLargerUnit } from '@hms-dbmi-bgm/shared-portal-components/es/components/util/value-transforms';
import { LocalizedTime } from '@hms-dbmi-bgm/shared-portal-components/es/components/ui/LocalizedTime';
import { FileOverviewTable } from './components/file-overview/FileOverviewTable';

/**
 * Page containing the details of Items of type File
 */
export default class FileOverview extends DefaultItemView {
    getTabViewContents() {
        const initTabs = [];
        initTabs.push(FileView.getTabObject(this.props));
        return initTabs.concat(this.getCommonTabs()); // Add remainder of common tabs (Details, Attribution)
    }
}

const DataCard = ({ header = '', data = [] }) => {
    return (
        <div className="data-card">
            <div className="header">
                <span className="header-text">{header}</span>
            </div>
            <div className="body">
                {data.map(({ title, value = null }, i) => {
                    return (
                        <div className="datum" key={i}>
                            <span className="datum-title">{title}</span>
                            <span
                                className={
                                    'datum-value' +
                                    (value === null ? ' coming-soon' : '')
                                }>
                                {value ?? 'N/A'}
                            </span>
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

const FileViewDataCards = ({ context = {} }) => {
    const file_properties = [
        {
            title: 'Annotated Name',
            getProp: (context = {}) => context?.annotated_filename,
        },
        { title: 'Access', getProp: (context = {}) => context?.access_status },
        { title: 'UUID', getProp: (context = {}) => context?.uuid },
        {
            title: 'Data Format',
            getProp: (context = {}) => context?.file_format?.display_title,
        },
        {
            title: 'Size',
            getProp: (context = {}) =>
                bytesToLargerUnit(context?.file_summary?.file_size),
        },
        {
            title: 'MD5 Checksum',
            getProp: (context = {}) =>
                context?.content_md5sum || context?.md5sum,
        },
        {
            title: 'Public Release Date',
            getProp: (context = {}) => {
                return (
                    <LocalizedTime
                        timestamp={context?.file_status_tracking.released}
                        formatType="date-md"
                        dateTimeSeparator=" "
                    />
                );
            },
        },
    ];

    const data_information = [
        {
            title: 'Data Category',
            getProp: (context = {}) =>
                context?.data_generation_summary?.data_category?.join(', '),
        },
        {
            title: 'Data Type',
            getProp: (context = {}) =>
                context?.data_generation_summary?.data_type?.join(', '),
        },
        {
            title: 'Sequencing Center',
            getProp: (context = {}) =>
                context?.data_generation_summary?.sequencing_center,
        },
        {
            title: 'Generated By',
            getProp: (context = {}) =>
                context?.data_generation_summary?.submission_centers?.join(
                    ', '
                ),
        },
        {
            title: 'Experimental Assay',
            getProp: (context = {}) =>
                context?.data_generation_summary?.assays?.join(', '),
        },
        {
            title: 'Sequencing Platform',
            getProp: (context = {}) =>
                context?.data_generation_summary?.sequencing_platforms?.join(
                    ', '
                ),
        },
    ];

    const sample_information = [
        {
            title: 'ID by TPC',
            getProp: (context = {}) => context?.sample_summary?.id_by_tcp,
        },
        {
            title: 'Description',
            getProp: (context = {}) =>
                context?.sample_summary?.sample_descriptions?.join(', '),
        },
        {
            title: 'Study',
            getProp: (context = {}) =>
                context?.sample_summary?.studies?.join(', '),
        },
        {
            title: 'Donor ID',
            getProp: (context = {}) => context?.sample_summary?.donor_id,
        },
        {
            title: 'Tissue',
            getProp: (context = {}) => context?.sample_summary?.tissue,
        },
        {
            title: 'Analyte',
            getProp: (context = {}) =>
                context?.sample_summary?.analytes?.join(', '),
        },
    ];

    return (
        <div className="data-cards-container">
            <DataCard
                header={'File Properties'}
                data={file_properties.map(({ title, getProp }) => {
                    return { title, value: getProp(context) };
                })}
            />
            <DataCard
                header={'Data Information'}
                data={data_information.map(({ title, getProp }) => {
                    return { title, value: getProp(context) };
                })}
            />
            <DataCard
                header={'Sample Information'}
                data={sample_information.map(({ title, getProp }) => {
                    return { title, value: getProp(context) };
                })}
            />
        </div>
    );
};

const FileViewHeader = ({ context }) => {
    const { accession, status, description } = context;
    console.log('context:', context);
    return (
        <div className="file-view-header">
            <div className="data-group data-row header">
                <h1 className="header-text">File Overview</h1>
                <a
                    className="btn btn-primary download-file-button"
                    href={context.href}
                    target="_blank"
                    rel="noreferrer noopener"
                    download>
                    <i className="icon icon-download fas"></i>
                    <span>Download File</span>
                </a>
            </div>
            <div className="data-group data-row">
                <div className="datum">
                    <span className="datum-title">File Accession </span>
                    <span className="vertical-divider">|</span>
                    <span>
                        <b className="accession">{accession}</b>
                    </span>
                </div>
                <div className="datum right-group">
                    <div className="status-group" data-status={status}>
                        <i className="icon icon-circle fas"></i>
                        <span className="status">
                            {status.charAt(0).toUpperCase() +
                                status.substring(1)}
                        </span>
                    </div>
                    <span className="vertical-divider">|</span>
                    <a className="view-json">
                        <i className="icon icon-file-code far"></i>
                        <span>View JSON</span>
                    </a>
                </div>
            </div>
            <div className="data-group data-row">
                <div className="datum description">
                    <span className="datum-title">Description </span>
                    <span className="vertical-divider">|</span>
                    <span
                        className={
                            'datum-value' + (description ? '' : ' text-gray')
                        }>
                        {description || 'Coming Soon'}
                    </span>
                </div>
            </div>
        </div>
    );
};

const AssociatedFilesTab = (props) => {
    const fileSetUuids = props.context.file_sets
        .map((fs) => fs.uuid)
        .join('&file_sets.uuid=');
    const associatedFilesSearchHref = `/search/?type=File&uuid!=${props.context.uuid}&file_sets.uuid=${fileSetUuids}`;

    const DACGeneratedFiles =
        associatedFilesSearchHref + '&submission_centers.display_title=HMS DAC';

    const ExternallyGeneratedFiles =
        associatedFilesSearchHref +
        '&submission_centers.display_title!=HMS DAC';

    return (
        <div className="content associated-files">
            <h1 className="associated-files-header">Associated Files</h1>
            <hr />
            <FileOverviewTable
                {...props}
                embeddedTableHeader="DAC Generated Files"
                associatedFilesSearchHref={DACGeneratedFiles}
            />
            <FileOverviewTable
                {...props}
                embeddedTableHeader="Externally Generated Files"
                associatedFilesSearchHref={ExternallyGeneratedFiles}
            />
        </div>
    );
};

const QCOverviewTab = ({ context }) => {
    const bamLinks = [
        { name: 'BAMQC1', link: '/' },
        { name: 'BAMQC2', link: '/' },
        { name: 'BAMQC3', link: '/' },
    ];
    return (
        // <div className="content">
        //     <h1 className="header">QC Overview</h1>
        //     <div className="body">
        //         <div className="data-group data-row">
        //             <div className="datum">
        //                 <span className="datum-title">
        //                     Full Quality Metrics{' '}
        //                 </span>
        //                 {bamLinks.map((bamLink, i) => {
        //                     return (
        //                         <div className="bamqc-link-group" key={i}>
        //                             <span className="vertical-divider">|</span>
        //                             <a href={bamLink.link}>{bamLink.name}</a>
        //                         </div>
        //                     );
        //                 })}
        //                 <span></span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">Value 1</span>
        //                 <span className="datum-value">Value</span>
        //                 <span className="datum-value text-gray">
        //                     &#91;Low Range - High Range &#93;
        //                 </span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">Value 2</span>
        //                 <span className="datum-value">Value</span>
        //                 <span className="datum-value text-gray">
        //                     &#91;Low Range - High Range &#93;
        //                 </span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">Value 3</span>
        //                 <span className="datum-value">Value</span>
        //                 <span className="datum-value text-gray">
        //                     &#91;Low Range - High Range &#93;
        //                 </span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">Value 4</span>
        //                 <span className="datum-value">Value</span>
        //                 <span className="datum-value text-gray">
        //                     &#91;Low Range - High Range &#93;
        //                 </span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">Value 5</span>
        //                 <span className="datum-value text-gray">
        //                     Coming Soon
        //                 </span>
        //             </div>
        //         </div>
        //     </div>
        // </div>
        <h2 className="tab-coming-soon">Coming soon</h2>
    );
};

const AnalysisInformationTab = ({ context }) => {
    return (
        // <div className="content">
        //     <h1 className="header">Analysis Information</h1>
        //     <div className="body">
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">Analysis ID</span>
        //                 <span className="datum-value text-gray">
        //                     Coming Soon
        //                 </span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">
        //                     Workflow Description / Analysis Method
        //                 </span>
        //                 <span className="datum-value text-gray">
        //                     Coming Soon
        //                 </span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">
        //                     Reference Genome Build
        //                 </span>
        //                 <span className="datum-value">GCA_000001405.15</span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">
        //                     Reference Genome Name
        //                 </span>
        //                 <span className="datum-value">GRCh38</span>
        //             </div>
        //         </div>
        //         <div className="data-group text-card">
        //             <div className="datum">
        //                 <span className="datum-title">
        //                     Read Group Name / Sample Name
        //                 </span>
        //                 <span className="datum-value text-gray">
        //                     Coming Soon
        //                 </span>
        //             </div>
        //         </div>
        //     </div>
        // </div>
        <h2 className="tab-coming-soon">Coming soon</h2>
    );
};

const FileViewTabs = (props) => {
    const { context, schemas, href } = props;

    useEffect(() => {}, [href]);

    return (
        <div className="tabs-container">
            <DotRouter
                href={href}
                navClassName=""
                isActive={true}
                prependDotPath="file-overview">
                <DotRouterTab
                    dotPath=".associated-files"
                    tabTitle="Associated Files"
                    arrowTabs={false}
                    default>
                    <AssociatedFilesTab {...props} />
                </DotRouterTab>
                <DotRouterTab
                    dotPath=".analysis-information"
                    tabTitle="Analysis Information"
                    arrowTabs={false}>
                    <AnalysisInformationTab />
                </DotRouterTab>
                <DotRouterTab
                    dotPath=".qc-overview"
                    tabTitle="QC Overview"
                    arrowTabs={false}>
                    <QCOverviewTab />
                </DotRouterTab>
            </DotRouter>
        </div>
    );
};

const FileViewTitle = (props) => {
    const { context, session, href } = props;

    const breadcrumbs = [
        { display_title: 'Home', href: '/' },
        { display_title: 'Data' },
        { display_title: 'Bechmarking Data' },
        { display_title: context?.dataset?.toUpperCase() || '' },
    ];

    return (
        <div className="file-view-title container-wide">
            <nav className="file-view-title-navigation">
                <ul className="breadcrumb-list">
                    {breadcrumbs.map(({ display_title, href }, i, arr) => {
                        return (
                            <li className="breadcrumb-list-item" key={i}>
                                <a
                                    className={
                                        'breadcrumb-list-item-link' +
                                        (href ? '' : ' no-link')
                                    }
                                    href={href}>
                                    {display_title}
                                </a>
                                {i < arr.length - 1 ? (
                                    <i className="icon icon-fw icon-angle-right fas"></i>
                                ) : null}
                            </li>
                        );
                    })}
                </ul>
            </nav>
            <h1 className="file-view-title-text">{context.display_title}</h1>
        </div>
    );
};

const FileViewUI = (props) => {
    const { context } = props;
    return (
        <div className="file-view-content">
            <FileViewHeader context={context} />
            <FileViewDataCards context={context} />
            <FileViewTabs {...props} />
        </div>
    );
};

const FileView = React.memo(function FileView(props) {
    const { context, session, href } = props;
    return (
        <div className="file-view">
            <FileViewTitle context={context} session={session} href={href} />
            <FileViewUI {...props} />
        </div>
    );
});

FileView.getTabObject = function (props) {
    return {
        tab: <span>File Overview</span>,
        key: 'file-overview',
        content: <FileView {...props} />,
    };
};
