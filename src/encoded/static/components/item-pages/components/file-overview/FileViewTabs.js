'use strict';

import React, { useEffect, useState } from 'react';
import {
    DotRouter,
    DotRouterTab,
} from '@hms-dbmi-bgm/shared-portal-components/es/components/ui/DotRouter';
import { ajax } from '@hms-dbmi-bgm/shared-portal-components/es/components/util';

import { FileOverviewTableController } from './FileOverviewTable';
import { VcfAnalysisOverview } from './VcfAnalysisOverview';
import { QcOverviewTabContent } from './QcOverviewTabContent';
import ReactTooltip from 'react-tooltip';

/**
 * DotRouterTab content for displaying the files in the same file set as the
 * current file. Separates the files into those generated by the DAC and those
 * generated externally.
 */
const AssociatedFilesTab = (props) => {
    const { context = {} } = props;
    const fileSets = context?.file_sets || [];

    // Create a search href for retrieving BAM/CRAM files in the same file set
    let DACGeneratedFilesHref, ExternallyGeneratedFilesHref;

    if (fileSets.length > 0) {
        const fileSetUuids = context?.file_sets
            ?.map((fs) => fs.uuid)
            ?.join('&file_sets.uuid=');
        const associatedFilesSearchHref = `/search/?type=File&file_format.display_title=cram&file_format.display_title=bam&uuid!=${props.context.uuid}&file_sets.uuid=${fileSetUuids}`;

        DACGeneratedFilesHref =
            associatedFilesSearchHref +
            '&submission_centers.display_title=HMS DAC';

        ExternallyGeneratedFilesHref =
            associatedFilesSearchHref +
            '&submission_centers.display_title!=HMS DAC';
    }

    return (
        <div className="content associated-files">
            {fileSets.length > 0 ? (
                <>
                    <FileOverviewTableController
                        {...props}
                        embeddedTableHeaderText="DAC Generated Files"
                        associatedFilesSearchHref={DACGeneratedFilesHref}
                    />
                    <FileOverviewTableController
                        {...props}
                        embeddedTableHeaderText="Externally Generated Files"
                        associatedFilesSearchHref={ExternallyGeneratedFilesHref}
                    />
                </>
            ) : (
                <div className="no-results">
                    <div className="no-results-content">
                        <i className="icon icon-folder-open fas"></i>
                        <h3 className="header">No Associated Files Found</h3>
                        <span className="subheader">
                            There are no DAC generated or externally generated
                            files associated with this file
                        </span>
                    </div>
                </div>
            )}
        </div>
    );
};

// DotRouterTab content for displaying Analysis information for the current file.
const AnalysisInformationTab = (props) => {
    if (
        props?.context?.file_summary?.file_format === 'vcf' ||
        props?.context?.file_summary?.file_format === 'vcf_gz'
    ) {
        return <VcfAnalysisOverview {...props} />;
    } else {
        // no results
        return (
            <div className="no-results">
                <div className="no-results-content">
                    <i className="icon icon-network-wired fas"></i>
                    <h3 className="header">Analysis Information Coming Soon</h3>
                    <span className="subheader">
                        Check back for updates on Analysis Information
                        development with future portal releases
                    </span>
                </div>
            </div>
        );
    }
};

// DotRouterTab content for displaying QC information for the current file.
const QCOverviewTab = ({ context }) => {
    const [isConsortiumMember, setIsConsortiumMember] = useState(false);

    useEffect(() => {
        // Request user session information
        ajax.load(
            // `/${JWT.getUserDetails()?.uuid}`,
            `/session-properties`,
            (resp) => {
                console.log('response', resp);
                // Check if user is a member of SMaHT consortium
                const isConsortiumMember = resp?.consortia?.some(
                    ({ uuid, display_title }) => {
                        uuid === '358aed10-9b9d-4e26-ab84-4bd162da182b' &&
                            display_title === 'SMaHT';
                    }
                );
                if (isConsortiumMember) {
                    setIsConsortiumMember(true);
                }
            },
            'GET',
            (err) => {
                if (err.notification !== 'No results found') {
                    console.log(
                        'ERROR determining user consortium membership',
                        err
                    );
                }
            }
        );
    }, []);

    // Show placeholder for non-consortium members
    if (!isConsortiumMember) {
        return (
            <div className="protected-data callout-card">
                <i className="icon icon-user-lock fas"></i>
                <h4>Protected Data</h4>
                <span>
                    To view this data, you must have access to SMaHT protected
                    access data on dbGaP.
                </span>
            </div>
        );
    }

    // Assume a user is a consortium member, check for QualityMetrics Items
    return context?.quality_metrics?.length > 0 ? (
        <QcOverviewTabContent context={context} />
    ) : (
        <div className="no-results">
            <div className="no-results-content">
                <i className="icon icon-chart-area fas"></i>
                <h3 className="header">QC Overview Coming Soon</h3>
                <span className="subheader">
                    Check back for updates on QC Overview development with
                    future portal releases
                </span>
            </div>
        </div>
    );
};

export const FileViewTabs = (props) => {
    const { context } = props;
    const { file_sets = [], uuid } = context || {};

    const [associatedFilesTitle, setAssociatedFilesTitle] =
        useState('Associated Files');

    useEffect(() => {
        let fileset_uuid_query_params = '';
        file_sets.forEach((file_set) => {
            fileset_uuid_query_params += '&file_sets.uuid=' + file_set.uuid;
        });

        const searchURL =
            `/search/?type=File&uuid!=${uuid}&status=retracted&status=obsolete&notes_to_tsv!=No+value` +
            fileset_uuid_query_params;

        ajax.load(
            searchURL,
            (resp) => {
                setAssociatedFilesTitle(
                    <div data-tip="Some associated files may have status 'redacted' or 'obsolete'. Please check for notes before downloading.">
                        <i className="icon fas icon-exclamation-triangle text-warning me-05"></i>
                        Associated Files
                    </div>
                );
                ReactTooltip.rebuild();
            },
            'GET',
            (err) => {
                if (err.notification !== 'No results found') {
                    console.log('ERROR FileViewTabs resp', err);
                }
            }
        );
    }, []);

    return (
        <div className="tabs-container">
            <DotRouter
                href={props.href}
                navClassName=""
                isActive={true}
                prependDotPath="file-overview">
                <DotRouterTab
                    dotPath=".analysis-information"
                    tabTitle="Analysis Information"
                    arrowTabs={false}
                    default>
                    <AnalysisInformationTab {...props} />
                </DotRouterTab>
                <DotRouterTab
                    dotPath=".qc-overview"
                    tabTitle="QC Overview"
                    arrowTabs={false}>
                    <QCOverviewTab {...props} />
                </DotRouterTab>
                <DotRouterTab
                    dotPath=".associated-files"
                    tabTitle="Associated Files"
                    arrowTabs={false}>
                    <AssociatedFilesTab {...props} />
                </DotRouterTab>
            </DotRouter>
        </div>
    );
};
