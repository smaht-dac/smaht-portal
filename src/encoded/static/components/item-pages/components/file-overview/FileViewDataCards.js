'use strict';

import React from 'react';
import { bytesToLargerUnit } from '@hms-dbmi-bgm/shared-portal-components/es/components/util/value-transforms';
import { LocalizedTime } from '@hms-dbmi-bgm/shared-portal-components/es/components/ui/LocalizedTime';

/**
 * Renders a card titled [header] and rows corresponding with entries in [data].
 * @param {string} header title for the group of data contained in the card
 * @param {Array} data array of objects containing a field's title and value
 */
const DataCard = ({ header = '', data = [] }) => {
    return (
        <div className="data-card">
            <div className="header">
                <span className="header-text">{header}</span>
            </div>
            <div className="body">
                {data.map(({ title, value = null }, i) => {
                    return (
                        <div className="datum" key={i}>
                            <span className="datum-title">{title}</span>
                            <span
                                className={
                                    'datum-value' +
                                    (value === null ? ' coming-soon' : '')
                                }>
                                {value ?? 'N/A'}
                            </span>
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

/**
 * Below are arrays of file property objects with [title] and [getProp], a
 * function for extracting the property's value (if available) from [context].
 * Used to populate the data cards in the FileViewDataCards component.
 */
const file_properties = [
    {
        title: 'Annotated Name',
        getProp: (context = {}) =>
            context?.annotated_filename ?? context?.filename,
    },
    { title: 'Access', getProp: (context = {}) => context?.access_status },
    { title: 'UUID', getProp: (context = {}) => context?.uuid },
    {
        title: 'Data Format',
        getProp: (context = {}) => context?.file_format?.display_title,
    },
    {
        title: 'Size',
        getProp: (context = {}) =>
            bytesToLargerUnit(context?.file_summary?.file_size),
    },
    {
        title: 'MD5 Checksum',
        getProp: (context = {}) => context?.content_md5sum || context?.md5sum,
    },
    {
        title: 'Public Release Date',
        getProp: (context = {}) => {
            return context?.file_status_tracking?.released ? (
                <LocalizedTime
                    timestamp={context?.file_status_tracking.released}
                    formatType="date-md"
                    dateTimeSeparator=" "
                />
            ) : null;
        },
    },
];
const data_information = [
    {
        title: 'Data Category',
        getProp: (context = {}) =>
            context?.data_generation_summary?.data_category?.join(', '),
    },
    {
        title: 'Data Type',
        getProp: (context = {}) =>
            context?.data_generation_summary?.data_type?.join(', '),
    },
    {
        title: 'Sequencing Center',
        getProp: (context = {}) =>
            context?.data_generation_summary?.sequencing_center,
    },
    {
        title: 'Generated By',
        getProp: (context = {}) =>
            context?.data_generation_summary?.submission_centers?.join(', '),
    },
    {
        title: 'Experimental Assay',
        getProp: (context = {}) =>
            context?.data_generation_summary?.assays?.join(', '),
    },
    {
        title: 'Sequencing Platform',
        getProp: (context = {}) =>
            context?.data_generation_summary?.sequencing_platforms?.join(', '),
    },
];
const sample_information = [
    {
        title: 'Description',
        getProp: (context = {}) =>
            context?.sample_summary?.sample_descriptions?.join(', '),
    },
    {
        title: 'Study',
        getProp: (context = {}) => context?.sample_summary?.studies?.join(', '),
    },
    {
        title: 'Donor ID',
        getProp: (context = {}) =>
            context?.sample_summary?.donor_ids?.join(', '),
    },
    {
        title: 'Tissue Type',
        getProp: (context = {}) => context?.sample_summary?.tissues?.join(', '),
    },
    {
        title: 'Analyte',
        getProp: (context = {}) =>
            context?.sample_summary?.analytes?.join(', '),
    },
];

/**
 * Parent component for the data cards containing information on the file.
 * @param {object} context the context of the item being viewed
 */
export const FileViewDataCards = ({ context = {} }) => {
    return (
        <div className="data-cards-container">
            <DataCard
                header={'File Properties'}
                data={file_properties.map(({ title, getProp }) => {
                    return { title, value: getProp(context) };
                })}
            />
            <DataCard
                header={'Data Information'}
                data={data_information.map(({ title, getProp }) => {
                    return { title, value: getProp(context) };
                })}
            />
            <DataCard
                header={'Sample Information'}
                data={sample_information.map(({ title, getProp }) => {
                    return { title, value: getProp(context) };
                })}
            />
        </div>
    );
};
