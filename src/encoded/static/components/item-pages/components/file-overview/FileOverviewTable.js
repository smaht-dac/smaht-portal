import React from 'react';
import { EmbeddedItemSearchTable } from '../EmbeddedItemSearchTable';
import { LocalizedTime } from '@hms-dbmi-bgm/shared-portal-components/es/components/ui/LocalizedTime';
import { valueTransforms } from '@hms-dbmi-bgm/shared-portal-components/es/components/util';

export const FileOverviewTable = (props) => {
    console.log('file overview table PROPS:', props);

    const fileSetUuids = props.context.file_sets
        .map((fs) => fs.uuid)
        .join('&file_sets.uuid=');
    const associatedFilesSearchHref = `/search/?type=File&file_sets.uuid=${fileSetUuids}`;
    console.log('file overview table HREF:', associatedFilesSearchHref);

    const { schemas, session } = props;

    // Some fields overriden in BenchmarkingTable component
    const originalColExtMap =
        EmbeddedItemSearchTable.defaultProps.columnExtensionMap;

    console.log('originalColExtMap:', originalColExtMap);

    const FileOverviewcolExtMap = {
        ...originalColExtMap, // Pull in defaults for all tables
        // Then overwrite or add onto the ones that already are there:
        // Select all button
        // '@type': {
        //     colTitle: (
        //         // I think below context arg is the issue... - Will 3 May 2024
        //         // Context now passed in from HeadersRowColumn (for file count)
        //         // <SelectAllFilesButton {...selectedFileProps} type="checkbox" />
        //         // This input box fixes it I believe
        //         <input type="checkbox" disabled={true} checked={false} />
        //     ),
        //     hideTooltip: true,
        //     noSort: true,
        //     widthMap: { lg: 63, md: 63, sm: 63 },
        //     render: (result, parentProps) => {
        //         return (
        //             <SelectionItemCheckbox
        //                 {...{ selectedItems, onSelectItem, result }}
        //                 isMultiSelect={true}
        //             />
        //         );
        //     },
        // },

        // File Name
        annotated_filename: {
            widthMap: { lg: 500, md: 400, sm: 300 },
            colTitle: 'File Name',
            render: function (result) {
                const {
                    '@id': atId,
                    display_title,
                    annotated_filename,
                } = result || {};

                return (
                    <span className="value text-left">
                        <a
                            href={atId}
                            target="_blank"
                            rel="noreferrer noopener">
                            {annotated_filename || display_title}
                        </a>
                    </span>
                );
            },
        },

        // Pipeline
        'software.display_title': {
            widthMap: { lg: 150, md: 150, sm: 130 },
            colTitle: 'Pipeline',
            render: function (result) {
                return (
                    <span className="value text-left">
                        {result.software.map((s) => s.display_title).join(', ')}
                    </span>
                );
            },
        },
        // Version
        'software.version': {
            widthMap: { lg: 150, md: 150, sm: 130 },
            colTitle: 'Version',
            render: function (result) {
                return (
                    <span className="value text-left">
                        {result.software.map((s) => s.version).join(', ')}
                    </span>
                );
            },
        },
        // // Platform
        // 'file_sets.sequencing.sequencer.display_title': {
        //     widthMap: { lg: 170, md: 160, sm: 150 },
        // },
        // // Generated By
        // 'submission_centers.display_title': {
        //     widthMap: { lg: 150, md: 150, sm: 150 },
        //     render: function (result, parentProps) {
        //         const { submission_centers: gccs = [] } = result || {};
        //         if (gccs.length === 0) return null;
        //         return (
        //             <span className="value text-left">
        //                 {gccs.map((gcc) => gcc.display_title).join(', ')}
        //             </span>
        //         );
        //     },
        // },
        // Sequencing Center
        // 'sequencing_center.display_title': {
        //     widthMap: { lg: 135, md: 135, sm: 135 },
        //     colTitle: 'Seq Center',
        // },

        // File Size
        file_size: {
            widthMap: { lg: 105, md: 100, sm: 100 },
            colTitle: 'Size',
            render: function (result, parentProps) {
                const value = result?.file_size;
                if (!value) return null;
                return (
                    <span className="value text-right">
                        {valueTransforms.bytesToLargerUnit(value)}
                    </span>
                );
            },
        },
        // Submission Date
        date_created: {
            widthMap: { lg: 180, md: 160, sm: 140 },
            render: function (result, parentProps) {
                const value = result?.date_created;
                if (!value) return null;
                return (
                    <span className="value text-right">
                        <LocalizedTime
                            timestamp={value}
                            formatType="date-file"
                        />
                    </span>
                );
            },
        },
        // Download Button
        href: {
            widthMap: { lg: 100, md: 100, sm: 100 },
            render: function (result, parentProps) {
                console.log('HREF!', result?.href);
                const value = result?.href;
                if (!value) return null;
                return (
                    <button className="download-button">
                        <i className="icon icon-download fas"></i>
                    </button>
                );
            },
        },
    };

    return (
        <EmbeddedItemSearchTable
            key={session}
            embeddedTableHeader={
                <>
                    <h1 className="header">Associated Files</h1>
                </>
            }
            rowHeight={31}
            // maxHeight={200}
            {...{
                searchHref: associatedFilesSearchHref,
                schemas,
                session,
            }}
            facets={null}
            columnExtensionMap={FileOverviewcolExtMap}
            hideColumns={[
                'display_title',
                '@type',
                'access_status',
                'data_type',
                'file_sets.sequencing.sequencer.display_title',
                'file_format.display_title',
                'submission_centers.display_title',
                'file_sets.libraries.assay.display_title',
                'sequencing_center.display_title',
            ]}
        />
    );
};

const BenchmarkingTable = (props) => {
    /**
     * A column extension map speifically for benchmarking tables.
     * Some of these things may be worth moving to the global colextmap eventually.
     */
};
