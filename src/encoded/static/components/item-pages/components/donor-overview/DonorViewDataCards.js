'use strict';

import React, { useEffect, useState } from 'react';
import {
    bytesToLargerUnit,
    capitalize,
    capitalizeSentence,
} from '@hms-dbmi-bgm/shared-portal-components/es/components/util/value-transforms';
import { LocalizedTime } from '@hms-dbmi-bgm/shared-portal-components/es/components/ui/LocalizedTime';

import {
    OverlayTrigger,
    Popover,
    PopoverHeader,
    PopoverBody,
} from 'react-bootstrap';
import { DataCard } from '../file-overview/FileViewDataCards';
import { ajax } from '@hms-dbmi-bgm/shared-portal-components/es/components/util';

/**
 * Below are arrays of file property objects with `title` and `getProp`, a
 * function for extracting the property's value (if available) from `context`.
 * Used to populate the data cards in the FileViewDataCards component.
 */
const default_file_properties = [
    {
        title: 'Status',
        getProp: (context = {}) => (
            <>
                <i
                    className="status-indicator-dot me-07"
                    data-status={context?.status}
                />
                {capitalizeSentence(context?.status)}
            </>
        ),
    },
    {
        title: 'Annotated Name',
        getProp: (context = {}) =>
            context?.annotated_filename ?? context?.filename,
    },
    { title: 'Access', getProp: (context = {}) => context?.access_status },
    { title: 'UUID', getProp: (context = {}) => context?.uuid },
    {
        title: 'Data Format',
        getProp: (context = {}) => context?.file_format?.display_title,
    },
    {
        title: 'Size',
        getProp: (context = {}) => {
            const fileSize = context?.file_summary?.file_size;
            if (fileSize) {
                return bytesToLargerUnit(fileSize);
            } else {
                return null;
            }
        },
    },
    {
        title: 'MD5 Checksum',
        getProp: (context = {}) => context?.content_md5sum || context?.md5sum,
    },
    {
        title: 'Public Release Date',
        getProp: (context = {}) => {
            return context?.file_status_tracking?.released ? (
                <LocalizedTime
                    timestamp={context?.file_status_tracking.released}
                    formatType="date-md"
                    dateTimeSeparator=" "
                />
            ) : null;
        },
    },
];
const default_data_information = [
    {
        title: 'Data Category',
        getProp: (context = {}) =>
            context?.data_generation_summary?.data_category?.join(', '),
    },
    {
        title: 'Data Type',
        getProp: (context = {}) =>
            context?.data_generation_summary?.data_type?.join(', '),
    },
    {
        title: 'Sequencing Center',
        getProp: (context = {}) =>
            context?.data_generation_summary?.sequencing_center,
    },
    {
        title: 'Generated By',
        getProp: (context = {}) =>
            context?.data_generation_summary?.submission_centers?.join(', '),
    },
    {
        title: 'Experimental Assay',
        getProp: (context = {}) =>
            context?.data_generation_summary?.assays?.join(', '),
    },
    {
        title: 'Sequencing Platform',
        getProp: (context = {}) =>
            context?.data_generation_summary?.sequencing_platforms?.join(', '),
    },
    {
        title: 'Dataset Target Coverage',
        getProp: (context = {}) => {
            if (
                context?.file_format?.display_title === 'bam' &&
                context?.data_type.some((d) => d === 'Aligned Reads') &&
                context?.data_generation_summary?.assays?.some(
                    (assay) =>
                        assay.includes('WGS') ||
                        assay.includes('Fiber-seq') ||
                        assay.includes('Hi-C')
                )
            ) {
                const cov =
                    context?.data_generation_summary?.target_group_coverage;
                if (cov && cov.length > 0) {
                    return cov[0] + 'X';
                }
            }
            return null;
        },
    },
    {
        title: 'Dataset Target Read Count',
        getProp: (context = {}) => {
            if (
                context?.file_format?.display_title === 'bam' &&
                context?.data_type.some((d) => d === 'Aligned Reads') &&
                context?.data_generation_summary?.assays?.some(
                    (assay) =>
                        assay.includes('RNA-Seq') ||
                        assay.includes('MAS-ISO-Seq')
                )
            ) {
                const count =
                    context?.data_generation_summary?.target_read_count;
                if (count && count.length > 0) {
                    return count[0];
                }
            }
            return null;
        },
    },
];

/**
 * Bootstrap Popover element for the description field in the sample information
 * data card. Contains a table with definitions for the terms used in the
 * description field.
 * @returns {JSX.Element} Popover component with term definitions
 *
 * Note: Use regular function here, as Bootstrap relies on `this`.
 */
function renderDescriptionPopover() {
    return (
        <Popover id="description-definitions-popover" className="w-auto">
            <PopoverBody className="p-0">
                <table className="table">
                    <thead>
                        <tr>
                            <th className="text-left">Term</th>
                            <th className="text-left">Definition</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td className="align-top text-left fw-bold text-nowrap">
                                Tissue Aliquot
                            </td>
                            <td className="text-left">
                                A sample of a sectioned solid tissue with a
                                pre-defined size, that is used for the
                                downstream sampling technique such as coring.
                            </td>
                        </tr>
                        <tr>
                            <td className="align-top text-left fw-bold">
                                Specimen
                            </td>
                            <td className="text-left">
                                A sample of a solid tissue without a pre-defined
                                size, that is neither a core nor homogenate.
                            </td>
                        </tr>
                        <tr>
                            <td className="align-top text-left fw-bold">
                                Core
                            </td>
                            <td className="text-left">
                                A core sample taken from the sectioned solid
                                tissue aliquot. Contains spatial information
                                within the tissue sample.
                            </td>
                        </tr>
                        <tr>
                            <td className="align-top text-left fw-bold">
                                Homogenate
                            </td>
                            <td className="text-left">
                                A sample of mechanically homogenized tissue that
                                can be divided into vials for distribution.
                                Applicable only to Benchmarking tissues.
                            </td>
                        </tr>
                        <tr>
                            <td className="align-top text-left fw-bold">
                                Liquid
                            </td>
                            <td className="text-left">
                                A sample of a liquid tissue (e.g. blood or
                                buccal swab).
                            </td>
                        </tr>
                        <tr>
                            <td className="align-top text-left fw-bold border-0">
                                Cells
                            </td>
                            <td className="text-left border-0">
                                A sample of cells derived from tissue (i.e.
                                Fibroblasts from skin).
                            </td>
                        </tr>
                    </tbody>
                </table>
            </PopoverBody>
        </Popover>
    );
}

const default_donor_information = [
    {
        title: 'Donor ID',
        getProp: (context = {}) => context?.external_id,
    },
    {
        title: 'Age',
        getProp: (context = {}) => context?.age,
    },
    {
        title: 'Sex',
        getProp: (context = {}) => context?.sex,
    },
    {
        title: 'Hardy Scale',
        getProp: (context = {}) => context?.hardy_scale,
    },
    {
        title: 'Tier',
        getProp: (context = {}) => {},
    },
];

const default_data_summary = [
    {
        title: 'Donor ID',
        getProp: (context = {}) => context?.external_id,
    },
];

const DonorStatistics = ({ context, fileSearchURL = '' }) => {
    const [statisticValues, setStatisticValues] = useState({
        tissues: context?.tissues?.length,
        assays: null,
        files: null,
    });

    useEffect(() => {
        // load value from searchUrl if not provided
        ajax.load(
            fileSearchURL,
            (resp) => {
                // console.log(
                //     'Response for: ',
                //     title,
                //     resp?.facets
                //         ?.find(
                //             (facet) =>
                //                 facet.field ===
                //                 'file_sets.libraries.assay.display_title'
                //         )
                //         ?.original_terms.reduce((acc, t) => {
                //             return acc + t.doc_count;
                //         }, 0)
                // );
                setStatisticValues({
                    ...statisticValues,
                    assays: resp?.facets
                        ?.find(
                            (facet) =>
                                facet.field ===
                                'file_sets.libraries.assay.display_title'
                        )
                        ?.original_terms.reduce((acc, t) => {
                            return acc + t.doc_count;
                        }, 0),
                    files: resp['@graph']?.length,
                });
            },
            'GET'
        );
    }, []);

    return (
        <div className="data-summary d-flex flex-column gap-3">
            <div className="d-flex gap-3">
                <div className="donor-statistic tissues d-flex flex-column p-2 gap-2">
                    <div className="donor-statistic-label text-center">
                        <i className="icon icon-lungs fas"></i>Tissues
                    </div>
                    <div className="donor-statistic-value text-center">
                        {statisticValues?.tissues ? (
                            <span>{statisticValues.tissues}</span>
                        ) : (
                            <i className="icon icon-circle-notch icon-spin fas" />
                        )}
                    </div>
                </div>
                <div className="donor-statistic assays d-flex flex-column p-2 gap-2">
                    <div className="donor-statistic-label text-center">
                        <i className="icon icon-dna fas"></i>Assays
                    </div>
                    <div className="donor-statistic-value text-center">
                        {statisticValues?.assays ? (
                            <span>{statisticValues.assays}</span>
                        ) : (
                            <i className="icon icon-circle-notch icon-spin fas" />
                        )}
                    </div>
                </div>
                <div className="donor-statistic files d-flex flex-column p-2 gap-2">
                    <div className="donor-statistic-label text-center">
                        <i className="icon icon-file fas"></i>Files
                    </div>
                    <div className="donor-statistic-value text-center">
                        {statisticValues?.files ? (
                            <span>{statisticValues?.files}</span>
                        ) : (
                            <i className="icon icon-circle-notch icon-spin fas" />
                        )}
                    </div>
                </div>
            </div>
            <div className="datum">
                <div className="datum-title">
                    <span>Bulk WGS Coverage</span>
                </div>
                <div className="datum-value">-</div>
            </div>
            <div className="datum">
                <div className="datum-title">
                    <span>DSA</span>
                </div>
                <div className="datum-value">-</div>
            </div>
        </div>
    );
};

/**
 * Parent component for the data cards containing information on the file.
 * @param {object} context the context of the item being viewed
 */
export const DonorViewDataCards = ({ context = {} }) => {
    const [FileData, setFileData] = useState(null);
    let donor_information = default_donor_information;
    // let data_summary = default_data_summary;
    // let lifestyle_information = default_lifestyle_information;
    // let prior_diagnosis_information = default_prior_diagnosis_information;

    return (
        <div className="data-cards-container d-flex">
            <div className="cards-left d-flex flex-column gap-4">
                <DataCard
                    header={'Donor Information'}
                    data={donor_information.map(({ title, getProp }) => {
                        return { title, value: getProp(context) };
                    })}
                />
                <div className="data-card">
                    <div className="header">
                        <span className="header-text">Data Summary</span>
                    </div>
                    <div className="body">
                        <DonorStatistics
                            context={context}
                            fileSearchURL={`/search/?type=File&donors.display_title=${context?.display_title}`}
                        />
                    </div>
                </div>
                <div className="d-flex gap-2">
                    <div className="data-card">
                        <div className="header">
                            <div className="header-text">
                                Exposure: Tobacco & Alcohol
                            </div>
                        </div>
                        <div className="body"></div>
                    </div>
                    <div className="data-card">
                        <div className="header">
                            <div className="header-text">Prior Diagnosis</div>
                        </div>
                        <div className="body"></div>
                    </div>
                </div>
            </div>
            <div className="cards-right d-flex flex-grow-1">
                <DataCard
                    header={'Tissue x Assay Data Matrix'}
                    // data={default_file_properties.map(({ title, getProp }) => {
                    //     return { title, value: getProp(context) };
                    // })}
                />
            </div>
        </div>
    );
};
