[tool.poetry]
name = "encoded"
version = "0.182.2"
description = "SMaHT Data Analysis Portal"
authors = ["4DN-DCIC Team <support@4dnucleome.org>"]
license = "MIT"
readme = "README.rst"
homepage = "https://github.com/smaht-dac/smaht-portal"
repository = "https://github.com/smaht-dac/smaht-portal"
documentation = "https://github.com/smaht-dac/smaht-portal"
packages = [
  { include="encoded", from="src" }
]
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    'Development Status :: 3 - Alpha',

    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Framework :: Pyramid',

    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: MIT License',
    'Topic :: Database :: Database Engines/Servers',

    # Specify the Python versions you support here. In particular, ensure
    # that you indicate whether you support Python 2, Python 3 or both.
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12'
]

[tool.poetry.dependencies]
python = ">=3.9.1,<3.13"
boto3 = "^1.34.149"
botocore = "^1.34.149"
certifi = ">=2021.5.30"
chardet = "^5.0.0"
codeguru-profiler-agent = "^1.2.4"
colorama = "0.3.3"
dcicsnovault = "^11.26.0"
dcicutils = "^8.18.3"
docutils = ">=0.16,<1"
encoded-core = "^0.9.6"
elasticsearch = "7.13.4"
execnet = "1.4.1"
googleapi = "^0.1.0"
humanfriendly = "^1.44.9"
hupper = "^1.12.1"
idna = "^3.10"
jmespath = "0.9.0"
loremipsum = "1.0.5"
netaddr = ">=0.8.0,<1"
openpyxl = "^3.0.7,!=3.0.8"  # a version 3.0.8 appeared but then got withdrawn, for now just pin 3.0.7. try again later.
passlib = "^1.7.4"
PasteDeploy = "^3.1.0"
pbkdf2 = "1.3"
# Pillow = "^6.2.2"
plaster = "1.0"
plaster-pastedeploy = "0.6"
psutil = "^5.9.0"
psycopg2-binary = "^2.9.3"
py = ">=1.10.0"  # used by pytest, not sure if elsewhere
# pyasn1 = "0.1.9"
PyBrowserID = "^0.14.0"
pycparser = "2.18"
PyJWT = "^2.6.0"
PyYAML = "^6.0.1"
pyparsing = "^3.0.7"
pyramid = "1.10.8"
pyramid_localroles = ">=0.1,<1"
pyramid-multiauth = ">=0.9.0,<1"
pyramid-retry = "^1.0"
pyramid-tm = "^2.4"
pyramid_translogger = "^0.1"
python-dateutil = "^2.8.2"
python_magic = ">=0.4.24,<1"
pytz = ">=2021.3"
rdflib = "^4.2.2"
rdflib-jsonld = ">=0.5.0,<1.0.0"
# repoze.debug is needed to use pyramid.pserve - Will Feb 17 2022
"repoze.debug" = ">=1.0.2"
requests = "^2.23.0"
rfc3986 = "^1.4.0"
rsa = "^4.9"
rutter = ">=0.3,<1"
sentry-sdk = "^1.5.6"
simplejson = "^3.17.0"
SPARQLWrapper = "^1.8.5"
SQLAlchemy = "1.4.41"
structlog = ">=19.2.0,<20"
#submit4dn = "0.9.7"
subprocess-middleware = "^0.3.0"
supervisor = "^4.2.4"
# Useful for picking apart pyproject.toml
termcolor = "^2.4.0"
toml = ">=0.10.1,<1"
tqdm = "^4.59.0"
transaction = "^3.0.0"
translationstring = "1.3"
uptime = ">=3.0.1,<4"
urllib3 = "^1.26.4"
venusian = "^3.1.0"
waitress = "^2.1.1"
WebOb = "^1.8.7"
WebTest = "^2.0.35"
WSGIProxy2 = "0.4.2"
"zope.deprecation" = "^4.4.0"
"zope.interface" = "^4.7.2"
"zope.sqlalchemy" = "1.6"
markdown = "^3.5.1"
pygments = "^2.17.2"
setuptools = "76.1.0"

[tool.poetry.dev-dependencies]
# PyCharm says boto3-stubs contains useful type hints
boto3-stubs = "^1.34.149"
botocore-stubs = "^1.34.149"
coverage = ">=6.2"
codacy-coverage = ">=1.3.11"
coveralls = ">=3.3.1"
fakeredis = "^2.21.3"
flake8 = ">=3.9.0"
flaky = ">=3.7.0"
pip-licenses = "^3.3.1"
pipdeptree = "^2.1.0"
# TODO: Investigate whether a major version upgrade is allowable for 'pytest', which is several versions behind.
pytest = "^7.2.1"
pytest-cov = ">=2.2.1"
#pytest-exact-fixtures = ">=0.3"
pytest-instafail = ">=0.3.0"
pytest-mock = ">=0.11.0"
pytest-timeout = ">=1.0.0"
pytest-xdist = ">=1.14"
wheel = ">=0.29.0"


# In pytest 6.0, we'll be able to use this instead of a separate pytest.ini configuration.
# -kmp 18-Jan-2021
#
# [tool.pytest.ini_options]
# minversion = "6.0"
# ...etc.
# See details at https://pytest.org/en/stable/customize.html

[tool.poetry.scripts]
# dcicutils commands
add-image-tag = "dcicutils.ecr_scripts:add_image_tag_main"
publish-to-pypi = "dcicutils.scripts.publish_to_pypi:main"
show-global-env-bucket = "dcicutils.env_scripts:show_global_env_bucket_main"
show-image-manifest = "dcicutils.ecr_scripts:show_image_manifest_main"
show-image-catalog = "dcicutils.ecr_scripts:show_image_catalog_main"
unrelease-most-recent-image = "dcicutils.ecr_scripts:unrelease_most_recent_image_main"
view-portal-object= "dcicutils.scripts.view_portal_object:main"
# snovault commands
batchupgrade = "snovault.batchupgrade:main"
check-rendering = "snovault.commands.check_rendering:main"
clear-db-es-contents = "snovault.commands.clear_db_es_contents:main"
create-mapping = "snovault.elasticsearch.create_mapping:main"
create-mapping-on-deploy = "snovault.commands.create_mapping_on_deploy:main"
dev-servers = "snovault.dev_servers:main"
es-index-data = "snovault.commands.es_index_data:main"
generate-local-access-key = "snovault.commands.generate_local_access_key:main"
ingestion-listener = "snovault.ingestion.ingestion_listener:main"
jsonld-rdf = "snovault.commands.jsonld_rdf:main"
load-access-keys = "snovault.commands.load_access_keys:main"
load-data = "snovault.commands.load_data:main"
load-data-by-type = "snovault.commands.load_data_by_type:main"
load-data-from-local = "encoded.commands.load_data_from_local:main"
load-items = "encoded.commands.load_items:main"
purge-item-type = "snovault.commands.purge_item_type:main"
run-upgrade-on-inserts = "snovault.commands.run_upgrader_on_inserts:main"
update-inserts-from-server = "snovault.commands.update_inserts_from_server:main"
wipe-test-indices = "snovault.commands.wipe_test_indices:main"
# encoded commands
create-annotated-filenames = "encoded.commands.create_annotated_filenames:main"
flatten-structured-data = "encoded.commands.flatten_structured_data:main"  # For dev/testing only
load-users-from-oc = "encoded.commands.load_users_from_oc:main"
parse-structured-data= "encoded.commands.parse_structured_data:main"  # For dev/testing only
prepare-docker = "encoded.commands.prepare_template:prepare_docker_main"
prepare-local-dev = "encoded.commands.prepare_template:prepare_local_dev_main"
release-file = "encoded.commands.release_file:main"
show-schema= "encoded.commands.show_schema:main"  # For dev/testing only
write-submission-spreadsheets = "encoded.commands.write_submission_spreadsheets:main"

[paste.app_factory]
main = "encoded:main"

[paste.composite_factory]
indexer = "snovault.elasticsearch.es_index_listener:composite"
ingester = "snovault.ingestion.ingestion_listener:composite"

[paste.filter_app_factory]
memlimit = "snovault.memlimit:filter_app"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
